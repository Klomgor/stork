image: registry.gitlab.isc.org/isc-projects/stork/ci-base:3

# Only create pipelines for merge requests and pushes/merges to the main branch
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'

variables:
  POSTGRES_ADDR: postgres:5432
  POSTGRES_DB: storktest
  POSTGRES_USER: storktest
  POSTGRES_PASSWORD: storktest
  STORK_DATABASE_MAINTENANCE_NAME: "postgres"
  STORK_DATABASE_MAINTENANCE_USER_NAME: "storktest"
  STORK_DATABASE_MAINTENANCE_PASSWORD: "storktest"

  # this is used to build docker images of stork (using DIND)
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""  # this is workaround for TLS problem https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/

  # Force Unicode
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

  # The hooks are specified as the git submodules. It allows us to pin the
  # specific commit to release. It is beneficial as the hook development may
  # not be in sync with the main project development.
  # The hooks are not needed in the most of CI tasks, so the repositories are
  # not cloned by default.
  GIT_SUBMODULE_STRATEGY: none

default:
  # AWS can interrupt the spot instance anytime, so let's retry the job when
  # the interruption event happens to avoid a pipeline failure.
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# stages order
stages:
  - checks
  - build
  - hooks
  - deploy

### build jobs ###

# common parts used in build jobs
.base_build_debian:
  stage: checks
  rules:
    - when: always
  tags:
    - linux
    - aws
    - runner-manager
    - amd64
  cache:
    key: $CI_PROJECT_NAME-debian-$CI_COMMIT_REF_SLUG
    paths:
      - tools/
      - webui/node_modules/
      - /root/.cache/go-build
      - /var/lib/dpkg/info
    fallback_keys:
      - $CI_PROJECT_NAME-debian-$CI_DEFAULT_BRANCH
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
    - rake prepare
    - rake prepare:deps

.base_build_debian_arm:
  extends: .base_build_debian
  cache:
    key: $CI_PROJECT_NAME-debian-arm-$CI_COMMIT_REF_SLUG
    paths:
      - tools/
      - webui/node_modules/
      - /root/.cache/go-build
      - /var/lib/dpkg/info
    fallback_keys:
      - $CI_PROJECT_NAME-debian-arm-$CI_DEFAULT_BRANCH
  tags:
    - linux
    - aws
    - runner-manager
    - aarch64

.base_build_ubi:
  stage: checks
  rules:
    - when: always
  cache:
    key: $CI_PROJECT_NAME-ubi-$CI_COMMIT_REF_SLUG
    paths:
      - tools/
      - webui/node_modules/
      - /root/.cache/go-build
    fallback_keys:
      - $CI_PROJECT_NAME-ubi-$CI_DEFAULT_BRANCH
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-redhat-ubi8:2
  tags:
    - linux
    - aws
    - runner-manager
    - amd64
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
    - rake prepare
    - rake prepare:deps

.base_build_ubi_arm:
  extends: .base_build_ubi
  cache:
    key: $CI_PROJECT_NAME-ubi-arm-$CI_COMMIT_REF_SLUG
    paths:
      - tools/
      - webui/node_modules/
      - /root/.cache/go-build
    fallback_keys:
      - $CI_PROJECT_NAME-ubi-arm-$CI_DEFAULT_BRANCH
  tags:
    - linux
    - aws
    - runner-manager
    - aarch64

.base_build_alpine:
  stage: checks
  rules:
    - when: always
  cache:
    key: $CI_PROJECT_NAME-alpine-$CI_COMMIT_REF_SLUG
    paths:
      - webui/node_modules/
      - tools/
    fallback_keys:
      - $CI_PROJECT_NAME-alpine-$CI_DEFAULT_BRANCH
  image: registry.gitlab.isc.org/isc-projects/stork/pkgs-alpine:4
  tags:
    - linux
    - aws
    - runner-manager
    - amd64
  before_script:
    - sysctl -w net.ipv6.conf.all.disable_ipv6=1
    - sysctl -w net.ipv6.conf.default.disable_ipv6=1
    - rake prepare:dist
    - rake prepare:deps

.base_build_alpine_arm:
  extends: .base_build_alpine
  cache:
    key: $CI_PROJECT_NAME-alpine-arm-$CI_COMMIT_REF_SLUG
    paths:
      - tools/
      - webui/node_modules/
      - /root/.cache/go-build
    fallback_keys:
      - $CI_PROJECT_NAME-alpine-arm-$CI_DEFAULT_BRANCH
  tags:
    - linux
    - aws
    - runner-manager
    - aarch64

build_backend:
  extends: .base_build_debian
  script:
    - rake build:backend
  artifacts:
    untracked: true
    expire_in: 1 hour

### hooks ###
build_hooks:
  stage: hooks
  rules:
    - when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: always
  needs:
    - build_backend
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - rake hook:build
  artifacts:
    untracked: true
    expire_in: 1 hour
